basePath: /
definitions:
  entity.DailySchedule:
    properties:
      dayOfWeek:
        type: integer
      fromTime:
        type: string
      id:
        type: string
      toTime:
        type: string
    type: object
  entity.NotificationType:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Email
    - SMS
    - InApp
  entity.Organization:
    properties:
      callForwardingNumber:
        type: string
      createdAt:
        type: string
      daileySchedules:
        items:
          $ref: '#/definitions/entity.DailySchedule'
        type: array
      deletedAt:
        description: we want find undeleted records very fast
        type: string
      email:
        type: string
      id:
        type: string
      insuranceCompany:
        type: string
      name:
        type: string
      notifications:
        items:
          $ref: '#/definitions/entity.NotificationType'
        type: array
      phoneNumber:
        type: string
      specialities:
        items:
          $ref: '#/definitions/entity.Speciality'
        type: array
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/entity.User'
        type: array
      website:
        type: string
    type: object
  entity.Speciality:
    properties:
      id:
        type: integer
      name:
        type: string
      parent:
        $ref: '#/definitions/entity.Speciality'
      parent_id:
        type: integer
      subSpecialities:
        items:
          $ref: '#/definitions/entity.Speciality'
        type: array
    type: object
  entity.User:
    properties:
      createdAt:
        type: string
      daileySchedules:
        items:
          $ref: '#/definitions/entity.DailySchedule'
        type: array
      deletedAt:
        description: we want find undeleted records very fast
        type: string
      email:
        type: string
      family:
        type: string
      id:
        type: string
      name:
        type: string
      organization:
        $ref: '#/definitions/entity.Organization'
      organizationID:
        type: string
      phoneNumber:
        type: string
      role:
        $ref: '#/definitions/entity.UserRole'
      updatedAt:
        type: string
    type: object
  entity.UserRole:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Admin
    - Staff
    - Support
  errors.ErrorResponse:
    properties:
      details: {}
      message:
        type: string
      status:
        type: integer
    type: object
  types.ActivateOTPRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  types.AuthRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  types.ChangePasswordRequest:
    properties:
      access_token:
        type: string
      new_password:
        minLength: 8
        type: string
      old_password:
        minLength: 8
        type: string
    required:
    - access_token
    - new_password
    - old_password
    type: object
  types.ConfirmForgotPasswordRequest:
    properties:
      confirmation_code:
        type: string
      email:
        type: string
      new_password:
        minLength: 8
        type: string
    required:
    - confirmation_code
    - email
    - new_password
    type: object
  types.ConfirmTempPasswordRequest:
    properties:
      email:
        type: string
      new_password:
        minLength: 8
        type: string
      temporary_password:
        type: string
    required:
    - email
    - new_password
    - temporary_password
    type: object
  types.DailySchedule:
    properties:
      day_of_week:
        type: integer
      from_time:
        type: string
      to_time:
        type: string
    type: object
  types.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  types.OrganizationRequest:
    properties:
      callForwadingNumber:
        type: string
      dailySchedules:
        items:
          $ref: '#/definitions/types.DailySchedule'
        type: array
      email:
        type: string
      insuranceCompany:
        type: string
      name:
        type: string
      notifications:
        items:
          $ref: '#/definitions/entity.NotificationType'
        type: array
      phone_number:
        type: string
      specialities:
        items:
          type: integer
        type: array
      website:
        type: string
    type: object
  types.OrganizationResponse:
    properties:
      call_forwarding_number:
        type: string
      daily_schedules:
        items:
          $ref: '#/definitions/types.DailySchedule'
        type: array
      email:
        type: string
      id:
        type: string
      name:
        type: string
      notifications:
        items:
          $ref: '#/definitions/entity.NotificationType'
        type: array
      phone_number:
        type: string
      specialities:
        items:
          type: integer
        type: array
      website:
        type: string
    type: object
  types.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  types.ResendOTPRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  types.UserRequest:
    properties:
      daily_schedules:
        items:
          $ref: '#/definitions/types.DailySchedule'
        type: array
      email:
        type: string
      family:
        type: string
      id:
        type: string
      name:
        type: string
      phone_number:
        type: string
      role:
        type: string
    type: object
  types.UserResponse:
    properties:
      daily_schedules:
        items:
          $ref: '#/definitions/types.DailySchedule'
        type: array
      email:
        type: string
      family:
        type: string
      id:
        type: string
      name:
        type: string
      phone_number:
        type: string
      role:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: info@comvoca.com
    name: info@comvoca.com
  description: This is a back-end server for Comvoca Admin.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Comvoca Admin API
  version: "1.0"
paths:
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Authenticate request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authenticate successful, Change Password Required, Activate
            OTP Required
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Invalid Credentials
          schema:
            type: string
      summary: Authenticate user
      tags:
      - Authentication
  /api/v1/organizations/{OrganizationId}:
    get:
      description: Get Organization by id
      parameters:
      - description: Organization ID
        in: path
        name: OrganizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.OrganizationResponse'
      summary: Get Organization by id
      tags:
      - Organization
  /api/v1/organizations/{organizationId}/users:
    get:
      description: Retrieve users associated with a specific organization
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.User'
            type: array
      summary: Get Users by Organization
      tags:
      - Organization
    post:
      description: Register a user related to an organization
      parameters:
      - description: Organization ID
        in: path
        name: organizationId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Speciality'
      summary: Register User Related to Organization
      tags:
      - Organization
  /api/v1/organizations/speciality:
    get:
      description: Get Organization speciality
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Speciality'
      summary: Get Organization speciality
      tags:
      - Organization
  /api/v1/organizations/user:
    get:
      description: Retrieve the organization associated with the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.OrganizationResponse'
        "400":
          description: Invalid User ID
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth  // Make sure this matches the defined security scheme: []
      summary: Get Organization by User ID
      tags:
      - Organization
  /api/v1/orginization/:orginizationId:
    post:
      consumes:
      - application/json
      description: Add or Update a General User
      parameters:
      - description: UserRequest
        in: body
        name: property
        required: true
        schema:
          $ref: '#/definitions/types.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserResponse'
      summary: Add new User
      tags:
      - User
  /api/v1/otp:
    post:
      consumes:
      - application/json
      description: Activate OTP for user
      parameters:
      - description: Activate OTP request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.ActivateOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User activated successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
      summary: Activate OTP
      tags:
      - Authentication
  /api/v1/otp/resend:
    post:
      consumes:
      - application/json
      description: Resend OTP to user
      parameters:
      - description: Resend OTP request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.ResendOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OTP resent successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
      summary: Resend OTP
      tags:
      - Authentication
  /api/v1/password:
    post:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
      summary: Change password
      tags:
      - Authentication
  /api/v1/password/forgot:
    post:
      consumes:
      - application/json
      description: Initiate forgot password process
      parameters:
      - description: Forgot password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset initiated
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
      summary: Forgot password
      tags:
      - Authentication
  /api/v1/password/forgot/confirm:
    post:
      consumes:
      - application/json
      description: Confirm forgot password with confirmation code
      parameters:
      - description: Confirm forgot password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.ConfirmForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
      summary: Confirm forgot password
      tags:
      - Authentication
  /api/v1/password/temp/confirm:
    post:
      consumes:
      - application/json
      description: Confirm temporary password with new password
      parameters:
      - description: Confirm temporary password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.ConfirmTempPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
      summary: Confirm temporary password
      tags:
      - Authentication
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
      summary: Register user
      tags:
      - Authentication
  /api/v1/users:
    put:
      consumes:
      - application/json
      description: Add or Update a User
      parameters:
      - description: UserRequest
        in: body
        name: property
        required: true
        schema:
          $ref: '#/definitions/types.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserResponse'
      summary: Add new User
      tags:
      - User
  /api/v1/users/{user_id}:
    get:
      description: Get User by id
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserResponse'
      summary: Get User by id
      tags:
      - User
  /api/v1/users/role/{role}:
    get:
      description: Get Users by role
      parameters:
      - description: Role
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.UserResponse'
            type: array
      summary: Get Users by role
      tags:
      - User
  /organizations/{id}:
    put:
      consumes:
      - application/json
      description: Update all fields and relationships of an organization by its ID.
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Organization Update Data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.OrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Organization'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Organization not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an organization
      tags:
      - organizations
swagger: "2.0"
